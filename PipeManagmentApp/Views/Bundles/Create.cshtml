@model CreateBundleViewModel
@section Scripts {
    <script src="~/js/bundle-create.js"></script>
}
<h1>@ViewBag.Title</h1>
<form asp-action="Create" method="post">
    <div class="form-group" style="margin-bottom: 20px;">
        <label asp-for="Bundle.bundleNumber" class="control-label">№ Пакета</label>
        <div class="col-md-5">
            <input asp-for="Bundle.bundleNumber" class="form-control" />
            <span asp-validation-for="Bundle.bundleNumber" class="text-danger"></span>
        </div>
    </div>

    <div class="form-group" style="margin-bottom: 20px;">
        <label asp-for="Bundle.bundleDate" class="control-label">Дата создания пакета</label>
        <div class="col-md-5">
            <input asp-for="Bundle.bundleDate" class="form-control" type="datetime-local" />
            <span asp-validation-for="Bundle.bundleDate" class="text-danger"></span>
        </div>
    </div>

    <div class="form-group" style="margin-bottom: 20px;">
        <label class="control-label">Добавить трубы из существующих</label>
        <div class="col-md-5">
            <ul id="available-pipes">
                @foreach (var pipe in Model.AvailablePipes)
                {
                    <li>
                        <input type="checkbox" name="selectedPipes" value="@pipe.id" />
                        Труба №@pipe.number (Марка стали: @pipe.steelGrade, Вес: @pipe.weight кг)
                    </li>
                }
            </ul>
        </div>
        <button type="button" class="btn btn-primary" onclick="addPipes()">Добавить выбранные трубы</button>
    </div>

    <div class="form-group" style="margin-bottom: 20px;">
        <label class="control-label">Трубы в пакете</label>
        <div class="col-md-5">
            <ul id="pipe-list">
              
            </ul>
        </div>
    </div>

    <input type="hidden" id="removedPipes" name="removedPipes" />
    <input type="hidden" id="addedPipes" name="addedPipes" />

    <div class="form-group" style="margin-bottom: 20px;">
        <input type="submit" value="Создать пакет" class="btn btn-primary" />
        <a asp-action="Index" class="btn btn-secondary">Отмена</a>
    </div>
</form>

<script>
    var removedPipes = [];
    var addedPipes = [];

    function removePipe(pipeId) {
        // Сохраняем ID удаляемой трубы
        removedPipes.push(pipeId);
        document.getElementById("removedPipes").value = removedPipes.join(",");

        // Находим трубу в списке
        const pipeElement = document.querySelector(`[onclick="removePipe(${pipeId})"]`).parentElement;

        // Визуально удаляем трубу из списка
        pipeElement.remove();

        // Добавляем трубу обратно в доступные трубы
        const pipeData = pipeElement.textContent.trim();
        const availablePipesContainer = document.getElementById("available-pipes");

        // Создаем новый элемент для доступной трубы
        const newPipeElement = document.createElement("li");
        newPipeElement.innerHTML = `
                <input type="checkbox" name="selectedPipes" value="${pipeId}" />
                ${pipeData}
            `;
        availablePipesContainer.appendChild(newPipeElement);
    }

    function addPipes() {
        const selectedPipes = document.querySelectorAll('input[name="selectedPipes"]:checked');
        selectedPipes.forEach(pipe => {
            addedPipes.push(pipe.value);
            document.getElementById("addedPipes").value = addedPipes.join(",");

            // Визуально добавляем трубу в список пакета
            const pipeText = pipe.parentElement.textContent.trim();
            const newPipe = document.createElement("li");
            newPipe.innerHTML = pipeText + ` <button type="button" class="btn btn-danger btn-sm" onclick="removePipe(${pipe.value})">-</button>`;
            document.getElementById("pipe-list").appendChild(newPipe);

            // Убираем трубу из доступных для добавления
            pipe.parentElement.remove();
        });
    }

    document.addEventListener("DOMContentLoaded", function () {
        // Получаем добавленные трубы из Model
        const addedPipes = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.AddedPipes));

        // Добавляем трубы в pipe-list
        addedPipes.forEach(pipeId => {
            const pipe = document.querySelector(`input[name="selectedPipes"][value="${pipeId}"]`);
            if (pipe) {
                // Визуально добавляем трубу в список пакета
                const pipeText = pipe.parentElement.textContent.trim();
                const newPipe = document.createElement("li");
                newPipe.innerHTML = pipeText + ` <button type="button" class="btn btn-danger btn-sm" onclick="removePipe(${pipe.value})">-</button>`;
                document.getElementById("pipe-list").appendChild(newPipe);

                // Убираем трубу из доступных для добавления
                pipe.parentElement.remove();
                addedPipes.push(pipe.value); // Добавляем в массив добавленных труб
            }
        });
    });
</script>